@model X.PagedList.IPagedList<WebBanThatLung.Models.SanPhamModel>
@using X.PagedList.Mvc.Core


@{
    ViewData["Title"] = "Cửa hàng";
    var culture = System.Globalization.CultureInfo.InvariantCulture;
}

<style>
    #search-input {
        height: 47px;
        width: 255px;
        margin-top: 22px;
    }

    .form-group {
        margin-right: 60px;
    }

        .form-group input[type="radio"] {
            margin-left: 1.8cm;
        }

    .filter-section {
        display: flex;
        align-items: center;
        margin-bottom: -24px;
    }

        .filter-section h3 {
            margin-right: 100px;
        }

        .filter-section i {
            font-size: 35px;
            margin-right: 10px;
        }

    .range-slider {
        position: relative;
        width: 810px;
        margin-left: -90px;
        padding-left: 0;
        padding-top: 30px; /* Tăng khoảng cách trên cùng */
    }

        .range-slider input[type="range"] {
            position: absolute;
            width: 100%;
            margin: 0;
            -webkit-appearance: none;
            background: transparent;
        }

            .range-slider input[type="range"]#min-price,
            .range-slider input[type="range"]#max-price {
                height: 8px; /* Độ dày của thanh trượt */
                background: #87CEEB; /* Màu xanh dương sáng của thanh trượt */
                border-radius: 5px;
                margin-bottom: 10px; /* Thêm khoảng cách giữa các thanh trượt */
            }

                .range-slider input[type="range"]#min-price::-webkit-slider-thumb,
                .range-slider input[type="range"]#max-price::-webkit-slider-thumb {
                    -webkit-appearance: none;
                    height: 20px; /* Đường kính của nút trượt */
                    width: 20px; /* Đường kính của nút trượt */
                    background: #4682B4; /* Màu xanh dương đậm của nút trượt */
                    border-radius: 50%;
                    cursor: pointer;
                    position: relative;
                }

            .range-slider input[type="range"]::-webkit-slider-runnable-track {
                height: 8px;
                background: #4682B4; /* Màu nền của thanh trượt */
                border-radius: 5px;
            }

            .range-slider input[type="range"]#min-price::-webkit-slider-runnable-track {
                background: #4682B4; /* Màu nền của thanh trượt phía dưới */
            }

            .range-slider input[type="range"]#max-price::-webkit-slider-runnable-track {
                background: #4682B4; /* Màu nền của thanh trượt phía trên */
            }

    .price-values {
        font-size: 14px;
        margin-top: 20px; /* Tăng khoảng cách từ thanh trượt */
    }

    .single-product-item {
        margin-bottom: 35px;
        height: 500px;
    }

        .single-product-item img {
            border-radius: 5px;
            height: 269px;
            padding-top: 5px;
            padding-bottom: 8px;
        }

        /* Hiệu ứng hover cho hình ảnh sản phẩm */
        .single-product-item img {
            transition: transform 0.4s ease, box-shadow 0.4s ease, filter 0.4s ease;
            border-radius: 15px; /* Làm cho hình ảnh có góc bo tròn */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); /* Bóng mờ cơ bản */
        }

            .single-product-item img:hover {
                transform: scale(1.1) rotate(3deg); /* Phóng to và xoay nhẹ hình ảnh khi hover */
                box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3); /* Tăng bóng mờ khi hover */
                filter: brightness(1.3) contrast(1.2); /* Tăng độ sáng và độ tương phản khi hover */
            }

        /* Hiệu ứng hover cho tiêu đề sản phẩm */
        .single-product-item h3 {
            position: relative;
            transition: color 0.4s ease, text-shadow 0.4s ease;
            font-weight: bold;
        }

            .single-product-item h3::after {
                content: '';
                position: absolute;
                bottom: -5px;
                left: 0;
                width: 0;
                height: 2px;
                background: #4682B4; /* Đường gạch chân màu xanh dương */
                transition: width 0.4s ease; /* Hiệu ứng mở rộng khi hover */
            }

            .single-product-item h3:hover::after {
                width: 100%; /* Mở rộng đường gạch chân khi hover */
            }

            .single-product-item h3:hover {
                color: #4682B4; /* Đổi màu tiêu đề khi hover */
                text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Thêm hiệu ứng bóng mờ cho tiêu đề */
            }

    .cart-btn {
        display: inline-block;
        padding: 12px 24px;
        border-radius: 30px;
        text-decoration: none;
        text-transform: uppercase;
        font-weight: bold;
        position: relative;
        overflow: hidden;
        transition: background 0.4s ease, transform 0.4s ease, box-shadow 0.4s ease;
    }

        .cart-btn:hover {
            background-color: #F28123 !important;
            color: #fff !important;
            transform: scale(1.1); /* Phóng to nút khi hover */
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.4); /* Thêm bóng mờ khi hover */
        }



        /* Gradient sáng khi hover */
        .cart-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 300%;
            height: 300%;
            background: rgba(255, 255, 255, 0.1); /* Gradient sáng */
            border-radius: 50%;
            transform: translate(-50%, -50%) scale(0);
            transition: transform 0.4s ease;
        }

        .cart-btn:hover::before {
            transform: translate(-50%, -50%) scale(1); /* Mở rộng gradient sáng khi hover */
        }

    /* Hiệu ứng hover cho các liên kết trong phân trang */
    .pagination-wrap ul li a {
        display: inline-block;
        padding: 12px 18px;
        border-radius: 25px;
        transition: color 0.4s ease, background-color 0.4s ease, transform 0.4s ease, box-shadow 0.4s ease;
        color: #333;
        font-weight: bold;
        text-decoration: none;
    }

        .pagination-wrap ul li a:hover {
            color: #fff; /* Đổi màu chữ khi hover */
            transform: translateY(-5px); /* Di chuyển liên kết lên trên khi hover */
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* Thêm bóng mờ cho liên kết khi hover */
        }

        /* Hiệu ứng hover cho các liên kết phân trang hiện tại */
        .pagination-wrap ul li a.active {
            color: #fff; /* Đổi màu chữ khi là liên kết hiện tại */
        }

</style>

<!-- breadcrumb-section -->
<div class="breadcrumb-section breadcrumb-bg">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="breadcrumb-text">
                    <p></p>
                    <h1>Cửa hàng</h1>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- end breadcrumb section -->
<!-- products -->
<div class="product-section mt-150 mb-150">
    <div class="container">

        <!-- Thanh tìm kiếm, khoảng giá -->
        <div class="filter-section">
            <i class="fas fa-filter"></i> <!-- Biểu tượng bộ lọc -->
            <h3>Bộ Lọc</h3>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <input type="text" id="search-input" class="form-control" placeholder="Tìm kiếm sản phẩm...">
            </div>

            <div class="col-md-4">
                <div class="range-slider">
                    <input type="range" id="min-price" class="form-control-range" min="0" max="1000000" step="1" value="0">
                    <input type="range" id="max-price" class="form-control-range" min="0" max="1000000" step="1" value="1000000">
                    <div class="price-values">
                        <span id="min-price-value">0đ</span> - <span id="max-price-value">1000000đ</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row product-lists" id="product-lists">
            @if (!Model.Any())
            {
                <div class="col-12 text-center">
                    <div class="no-products">
                        <img src="~/media/NoProducts.png" alt="No Products" class="no-products-image">
                        <p class="no-products-text">Không có sản phẩm nào</p>
                    </div>
                </div>
            }
            else
            {
                @foreach (var item in Model)
                {
                    var hinhAnhDauTien = item.HINH_ANH?.FirstOrDefault()?.TEN_HINH_ANH;
                    <div class="col-md-3 text-center">
                        <div class="single-product-item">
                            <div style="padding: 10px 0px;">
                                <a asp-controller="CuaHang" asp-action="ChiTietSP" asp-route-id="@item.ID_SAN_PHAM">
                                    @if (!string.IsNullOrEmpty(hinhAnhDauTien))
                                    {
                                        <img src="~/media/SanPham/@hinhAnhDauTien" height="300px" width="90%" alt="">
                                    }
                                    else
                                    {
                                        <img src="~/media/SanPham/default.jpg" height="300px" width="90%" alt="No image available">
                                    }
                                </a>
                            </div>
                            <h3>@item.TEN_SAN_PHAM</h3>
                            <p class="product-price">@item.GIA.ToString("N0", culture).Replace(",", ".") VNĐ</p>
                            <a asp-controller="CuaHang" asp-action="ChiTietSP" asp-route-id="@item.ID_SAN_PHAM" class="cart-btn">
                                <i class="fas fa-shopping-cart"></i> Thêm vào giỏ hàng
                            </a>
                        </div>

                    </div>
                }
            }
        </div>

        <div class="row">
            <div class="col-lg-12 text-center">
                <div class="pagination-wrap">
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
               {
                   DisplayLinkToFirstPage = PagedListDisplayMode.Always,
                   DisplayLinkToLastPage = PagedListDisplayMode.Always,
                   DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
                   DisplayLinkToNextPage = PagedListDisplayMode.Always,
                   LinkToPreviousPageFormat = "<i class='fas fa-chevron-left'></i>",
                   LinkToNextPageFormat = "<i class='fas fa-chevron-right'></i>"
               })
                </div>
            </div>
        </div>
    </div>
</div>

<!-- end products -->

<style>
    .pagination {
        display: inline-block;
        padding-left: 0;
        margin: 0;
        border-radius: 0.25rem;
    }

        .pagination li {
            display: inline;
            margin: 0 5px;
        }

            .pagination li a {
                display: block;
                padding: 10px 15px;
                border: 1px solid #ddd;
                border-radius: 5px;
                color: #007bff;
                text-decoration: none;
                font-size: 14px;
                line-height: 1.5;
            }

            .pagination li.active {
                top: -2px;
                height: 40px;
                width: 40px;
                border-radius: 50%;
                background-color: #ff6600; /* Màu nền của trang hiện tại */
                color: white; /* Màu chữ của trang hiện tại */
                border-color: #ff6600; /* Màu border của trang hiện tại */
                font-weight: bold;
                margin: 0 5px;
                margin-bottom: 5px;
                padding: 8px;
            }

                .pagination li.active a {
                }

            .pagination li a:hover {
                background-color: #f1f1f1;
            }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const minPriceSlider = document.getElementById('min-price');
        const maxPriceSlider = document.getElementById('max-price');
        const minPriceValue = document.getElementById('min-price-value');
        const maxPriceValue = document.getElementById('max-price-value');

        // Lấy giá sản phẩm nhỏ nhất và lớn nhất từ danh sách sản phẩm
        function initializePriceRange() {
            let products = document.getElementsByClassName('single-product-item');
            let minPrice = Infinity;
            let maxPrice = -Infinity;

            Array.from(products).forEach(function (product) {
                let productPrice = parseInt(product.getElementsByClassName('product-price')[0].innerText.replace(/[^0-9]/g, ''));
                if (productPrice < minPrice) minPrice = productPrice;
                if (productPrice > maxPrice) maxPrice = productPrice;
            });

            // Cập nhật giá trị của thanh trượt và hiển thị
            minPriceSlider.min = minPrice;
            minPriceSlider.max = maxPrice;
            maxPriceSlider.min = minPrice;
            maxPriceSlider.max = maxPrice;
            minPriceSlider.value = minPrice;
            maxPriceSlider.value = maxPrice;

            minPriceValue.textContent = `${minPrice}đ`;
            maxPriceValue.textContent = `${maxPrice}đ`;
        }

        // Hàm cập nhật giá trị giá
        function updatePriceValues() {
            minPriceValue.textContent = `${minPriceSlider.value}đ`;
            maxPriceValue.textContent = `${maxPriceSlider.value}đ`;
        }

        minPriceSlider.addEventListener('input', updatePriceValues);
        maxPriceSlider.addEventListener('input', updatePriceValues);
        minPriceSlider.addEventListener('input', filterProducts);
        maxPriceSlider.addEventListener('input', filterProducts);
        document.getElementById('search-input').addEventListener('input', filterProducts);

        function removeVietnameseTones(str) {
            str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A");
            str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
            str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
            str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
            str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
            str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
            str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
            str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
            str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
            str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
            str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
            str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
            str = str.replace(/Đ/g, "D");
            str = str.replace(/đ/g, "d");

            str = str.replace(/\u0300|\u0301|\u0303|\u0309|\u0323|\u0331|\u0340|\u0341|\u0343|\u0344|\u0350|\u0351|\u0352|\u0357|\u0358|\u0359|\u0363|\u0364|\u0365|\u0366|\u0367|\u0368|\u0369|\u036A|\u036B|\u036C|\u036D|\u036E|\u036F/g, "");
            return str;
        }

        function filterProducts() {
            let filter = removeVietnameseTones(document.getElementById('search-input').value.toLowerCase());
            let minPrice = parseInt(minPriceSlider.value) || 0;
            let maxPrice = parseInt(maxPriceSlider.value) || Infinity;
            let products = document.getElementsByClassName('single-product-item');

            Array.from(products).forEach(function (product) {
                let productName = removeVietnameseTones(product.getElementsByTagName('h3')[0].innerText.toLowerCase());
                let productPrice = parseInt(product.getElementsByClassName('product-price')[0].innerText.replace(/[^0-9]/g, ''));

                if (productName.includes(filter) && productPrice >= minPrice && productPrice <= maxPrice) {
                    product.style.display = '';
                } else {
                    product.style.display = 'none';
                }
            });
        }

        initializePriceRange();
    });
</script>
